package com.jimmyking.toolkit.beans.config;import org.apache.zookeeper.*;import org.apache.zookeeper.Watcher.Event.KeeperState;import org.apache.zookeeper.data.Stat;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;import java.io.IOException;import java.util.List;import java.util.concurrent.CountDownLatch;@Componentpublic class ZookeeperClient implements Watcher {    private ZooKeeper zk = null;    private CountDownLatch connectedSemaphore = new CountDownLatch(1);    static Logger log = LoggerFactory.getLogger(ZookeeperClient.class);    /**     * 创建ZK连接     */    public void createConnection(String connectString, int sessionTimeout) {        this.releaseConnection();        try {            zk = new ZooKeeper(connectString, sessionTimeout, this);            connectedSemaphore.await();        } catch (InterruptedException | IOException e) {            log.error("zookeeper release connection failed", e);        }    }    /**     * 关闭ZK连接     */    public void releaseConnection() {        if (this.zk != null) {            try {                this.zk.close();            } catch (InterruptedException e) {                log.error("zookeeper release connection failed", e);            }        }    }    /**     * 创建节点     */    public boolean createPath(String path, String data) {        try {            String result = this.zk.create(path, data.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);            log.info(String.format("zookeeper create path success, path:%s, content:%s", result, data));        } catch (KeeperException | InterruptedException e) {            log.error(String.format("zookeeper create path failed, path:%s, data:%s", path, data), e);            return false;        }        return true;    }    /**     * 读取指定节点数据内容     */    public String readDataNoERROR(String path) {        try {            return new String(this.zk.getData(path, false, null));        } catch (KeeperException | InterruptedException e) {            log.error(String.format("zk中配置[%s]不存在", path));            return null;        }    }    /**     * 读取指定节点数据内容,无错误     */    public String readData(String path) {        try {            return new String(this.zk.getData(path, false, null));        } catch (KeeperException | InterruptedException e) {            log.error(String.format("zookeeper read data failed, path=%s", path), e);            return null;        }    }    public List<String> getChild(String path) {        try {            return this.zk.getChildren(path, null);        } catch (KeeperException | InterruptedException e) {            log.error(String.format("zookeeper read data failed, path=%s", path), e);            return null;        }    }    /**     * 更新指定节点数据内容     */    public boolean writeData(String path, String data) {        try {            Stat stat = this.zk.setData(path, data.getBytes(), -1);            log.info(String.format("zookeeper write data success，path:%s, stat:%s", path, stat));        } catch (KeeperException | InterruptedException e) {            log.error(String.format("zookeeper write data failed, path:%s", path), e);        }        return false;    }    /**     * 删除指定节点     */    public void deleteNode(String path) {        try {            this.zk.delete(path, -1);            log.info("zookeeper delete node success，path:" + path);        } catch (KeeperException | InterruptedException e) {            log.error(String.format("zookeeper delete data failed, path:%s", path), e);        }    }    /**     * 收到来自Server的Watcher通知后的处理。     */    @Override    public void process(WatchedEvent event) {        log.info(String.format("zookeeper get informed, %s", event.getState()));        if (KeeperState.SyncConnected == event.getState()) {            connectedSemaphore.countDown();        }    }    public static void main(String[] args) {        final int SESSION_TIMEOUT = 10000;        final String CONNECTION_STRING = "127.0.0.1:2181";        final String ZK_PATH = "/jinming";        ZookeeperClient client = new ZookeeperClient();        client.createConnection(CONNECTION_STRING, SESSION_TIMEOUT);        if (client.createPath(ZK_PATH, "init_data")) {            log.info(String.format("data: %s", client.readDataNoERROR(ZK_PATH)));            log.debug(String.format("path:%s,data: %s", ZK_PATH, client.readDataNoERROR(ZK_PATH)));            client.writeData(ZK_PATH, "update_data");            log.info(String.format("data: %s", client.readDataNoERROR(ZK_PATH)));            log.debug(String.format("path:%s,data: %s", ZK_PATH, client.readDataNoERROR(ZK_PATH)));            client.deleteNode(ZK_PATH);        }        client.releaseConnection();    }}